@page "/search"

@using Amadon.Services;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.InterchangeData;
@using AmadonStandardLib.UbClasses;
@using Microsoft.AspNetCore.Components.Web

<Blazorise.Container>
    <Blazorise.Row>
        <Blazorise.Column>
            <h5>Search UB texts for</h5>
            <h5>@CurrentTranslationTitle:</h5>
            <Blazorise.TextEdit @ref="TextToSearchObject" @bind-Text="@PersistentData.SearchData.QueryString" Placeholder="Search the subject index titles..." Size="Blazorise.Size.Small" @onkeydown="HandleKeyDown" />
        </Blazorise.Column>
    </Blazorise.Row>

    <br />
    <Blazorise.Row>
        <Blazorise.Column>
            <Blazorise.Tooltip Text="When on, includes the Part I of the Book in the search" Placement="Blazorise.TooltipPlacement.Bottom">
                <Blazorise.Switch @ref="SwitchPartI" TValue="bool" Checked="@PersistentData.SearchData.Part1Included" CheckedChanged="@OnIncludesPartI">Part I</Blazorise.Switch>
            </Blazorise.Tooltip>
            <Blazorise.Tooltip Text="When on, includes the Part III of the Book in the search" Placement="Blazorise.TooltipPlacement.Bottom">
                <Blazorise.Switch @ref="SwitchPartIII" TValue="bool" Checked="@PersistentData.SearchData.Part3Included" CheckedChanged="@OnIncludesPartIII">Part III</Blazorise.Switch>
            </Blazorise.Tooltip>
        </Blazorise.Column>

        <Blazorise.Column>
            <Blazorise.Tooltip Text="When on, includes the Part II of the Book in the search" Placement="Blazorise.TooltipPlacement.Bottom">
                <Blazorise.Switch @ref="SwitchPartII" TValue="bool" Checked="@PersistentData.SearchData.Part2Included" CheckedChanged="@OnIncludesPartII">Part II</Blazorise.Switch>
            </Blazorise.Tooltip>
            <Blazorise.Tooltip Text="When on, includes the Part IV of the Book in the search" Placement="Blazorise.TooltipPlacement.Bottom">
                <Blazorise.Switch @ref="SwitchPartIV" TValue="bool" Checked="@PersistentData.SearchData.Part4Included" CheckedChanged="@OnIncludesPartIV">Part IV</Blazorise.Switch>
            </Blazorise.Tooltip>
        </Blazorise.Column>
    </Blazorise.Row>
    <Blazorise.Row>
        <Blazorise.Tooltip Text="When on, search only in teh current paper" Placement="Blazorise.TooltipPlacement.Bottom">
            <Blazorise.Switch @ref="SwitchCurrentPaper" TValue="bool" Checked="@PersistentData.SearchData.CurrentPaperOnly" CheckedChanged="@OnSwitchCurrentPaper">Current Paper Only</Blazorise.Switch>
        </Blazorise.Tooltip>
    </Blazorise.Row>
</Blazorise.Container>

<Blazorise.Row>
    <Blazorise.Column>
        <Blazorise.Button Outline Size="Blazorise.Size.Small" Margin="Blazorise.Margin.Is2" Color="Blazorise.Color.Primary" @onclick="OnSortClick">@TextInSearchButton</Blazorise.Button>
        <Blazorise.Button Outline Size="Blazorise.Size.Small" Margin="Blazorise.Margin.Is2" Color="Blazorise.Color.Primary" @onclick="OnSearch">Search</Blazorise.Button>
    </Blazorise.Column>
</Blazorise.Row>

@if (@PersistentData.SearchData.paginationVisible)
{
    <Blazorise.Pagination>
        <Blazorise.PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
            <Blazorise.PaginationLink>
                <span aria-hidden="true">«</span>
            </Blazorise.PaginationLink>
        </Blazorise.PaginationItem>
        @{
            for (var i = PersistentData.SearchData.paginationFirst; i <= PersistentData.SearchData.paginationLast; i++)
            {
                var pageNumberAsString = i.ToString();
                <Blazorise.PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                    <Blazorise.PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                        @pageNumberAsString
                    </Blazorise.PaginationLink>
                </Blazorise.PaginationItem>
            }
        }
        <Blazorise.PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
            <Blazorise.PaginationLink>
                <span aria-hidden="true">»</span>
            </Blazorise.PaginationLink>
        </Blazorise.PaginationItem>
    </Blazorise.Pagination>
}


@if (PersistentData.SearchData.hasDataToShow)
{
    <p>@PersistentData.SearchData.SearchResultsMessage</p>
    @if (Convert.ToInt32(@PersistentData.SearchData.totalPages) > 1)
    {
        <p>Showing page @PersistentData.SearchData.currentPage of @PersistentData.SearchData.totalPages pages</p>
    }
    <Blazorise.Container>
        @for (int nrItem = PersistentData.SearchData.firstItemToShow; nrItem <= PersistentData.SearchData.lastItemToShwow; nrItem++)
        {
            SearchResult result = PersistentData.SearchData.SearchResults[nrItem - 1];
            <p>
                <Blazorise.Button Color="Blazorise.Color.Primary" Outline Size="Blazorise.Size.Small" Margin="Blazorise.Margin.Is2" Clicked="@(()=> ButtonClicked(@result.LinkText))">@result.ID <Blazorise.Icon Name="Blazorise.IconName.ArrowRight" /></Blazorise.Button>
                @((MarkupString)@result.Text)
            </p>
        }
    </Blazorise.Container>
}
else
{
    <p>@messageWhenNoSearch</p>
}


@code {

    #region Data Entry 
    Blazorise.TextEdit TextToSearchObject;

    Blazorise.Switch<bool> SwitchPartI;
    Blazorise.Switch<bool> SwitchPartII;
    Blazorise.Switch<bool> SwitchPartIII;
    Blazorise.Switch<bool> SwitchPartIV;
    Blazorise.Switch<bool> SwitchCurrentPaper;

    private string CurrentTranslationTitle = "";
    private string TextInSearchButton = "Order by Paragraph";

    #endregion

    #region Pagination Data
    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private string messageWhenNoSearch = "";
    #endregion

    bool showSearchResults = false;

    #region Data Entry Functions
    Task OnIncludesPartI(bool value)
    {
        PersistentData.SearchData.Part1Included = value;
        PersistentData.SearchData.CurrentPaperOnly = false;
        return Task.CompletedTask;
    }

    Task OnIncludesPartII(bool value)
    {
        PersistentData.SearchData.Part2Included = value;
        PersistentData.SearchData.CurrentPaperOnly = false;
        return Task.CompletedTask;
    }

    Task OnIncludesPartIII(bool value)
    {
        PersistentData.SearchData.Part3Included = value;
        PersistentData.SearchData.CurrentPaperOnly = false;
        return Task.CompletedTask;
    }

    Task OnIncludesPartIV(bool value)
    {
        PersistentData.SearchData.Part4Included = value;
        PersistentData.SearchData.CurrentPaperOnly = false;
        return Task.CompletedTask;
    }

    Task OnSwitchCurrentPaper(bool value)
    {
        PersistentData.SearchData.Part1Included = !value;
        PersistentData.SearchData.Part2Included = !value;
        PersistentData.SearchData.Part3Included = !value;
        PersistentData.SearchData.Part4Included = !value;
        PersistentData.SearchData.CurrentPaperOnly = value;
        return Task.CompletedTask;
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Key == "Enter")
        {
        }
    }
    #endregion

    #region Pagination Functions
    private bool IsActive(string page) => PersistentData.SearchData.currentPage == page;

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return PersistentData.SearchData.currentPage.Equals("1");
        }
        else if (navigation.Equals(NEXT))
        {
            return PersistentData.SearchData.currentPage.Equals(PersistentData.SearchData.maxPaginationPages.ToString());
        }
        return false;
    }

    private async Task<bool> CallSearch(SearchData searchData)
    {
        bool ret = await SearchBookService.Search(searchData);
        if (ret)
        {
            foreach (SearchResult result in searchData.SearchResults)
            {
                foreach(string word in searchData.Words)
                {
                    result.Text= HighlightTexts.HighlightString(result.Text, word);
                }
            }
        }
        return ret;
    }


    private void CalculatePagination()
    {
        int currentPageAsInt = Convert.ToInt32(PersistentData.SearchData.currentPage);
        PersistentData.SearchData.hasDataToShow = false;
        PersistentData.SearchData.paginationVisible = false;
        int totalItemsToShow = 0;
        //loadingIndicator.Show();
        messageWhenNoSearch = "Indexing translation to search.";
        if (currentPageAsInt == 1)
        {
            PersistentData.SearchData.ErrorMessage = "";
            bool ret = Task.Run(() => CallSearch(PersistentData.SearchData)).GetAwaiter().GetResult();
        }
        Task.Delay(500);
        StateHasChanged();
        //loadingIndicator.Hide();


        if (!string.IsNullOrEmpty(PersistentData.SearchData.ErrorMessage))
        {
            PersistentData.SearchData.paginationVisible = false;
            messageWhenNoSearch = PersistentData.SearchData.ErrorMessage;
            StateHasChanged();
            return;
        }
        else if (PersistentData.SearchData.SearchResults.Count == 0)
        {
            PersistentData.SearchData.paginationVisible = false;
            messageWhenNoSearch = PersistentData.SearchData.SearchResultsMessage;
            StateHasChanged();
            return;
        }

        totalItemsToShow = PersistentData.SearchData.SearchResults.Count;
        PersistentData.SearchData.firstItemToShow = (currentPageAsInt - 1) * PersistentData.SearchData.maxItemsPerPage + 1;
        PersistentData.SearchData.lastItemToShwow = Math.Min(PersistentData.SearchData.firstItemToShow + PersistentData.SearchData.maxItemsPerPage - 1, totalItemsToShow);
        PersistentData.SearchData.paginationVisible = totalItemsToShow > PersistentData.SearchData.maxItemsPerPage;
        int totalPages = (int)Math.Ceiling((double)totalItemsToShow / (double)PersistentData.SearchData.maxItemsPerPage);
        PersistentData.SearchData.totalPages = totalPages.ToString();
        PersistentData.SearchData.hasDataToShow = true;

        int maxPaginas = totalItemsToShow / PersistentData.SearchData.maxItemsPerPage + 1;
        currentPageAsInt = Convert.ToInt32(PersistentData.SearchData.currentPage);
        PersistentData.SearchData.paginationFirst = Math.Max(1, currentPageAsInt - 2);
        PersistentData.SearchData.paginationLast = Math.Min(totalPages, PersistentData.SearchData.paginationFirst + PersistentData.SearchData.maxPaginationItems - 1);

        PersistentData.SearchData.maxItemsPerPage = StaticObjects.Parameters.SearchPageSize;
        StateHasChanged();
    }

    private void Previous()
    {
        var currentPageAsInt = int.Parse(PersistentData.SearchData.currentPage);
        if (currentPageAsInt > 1)
        {
            PersistentData.SearchData.currentPage = (currentPageAsInt - 1).ToString();
        }
        CalculatePagination();
        StateHasChanged();
    }

    private void Next()
    {
        var currentPageAsInt = int.Parse(PersistentData.SearchData.currentPage);
        if (currentPageAsInt < PersistentData.SearchData.maxPaginationPages)
        {
            PersistentData.SearchData.currentPage = (currentPageAsInt + 1).ToString();
        }
        CalculatePagination();
    }

    private void SetActive(string page)
    {
        PersistentData.SearchData.currentPage = page;
        CalculatePagination();
    }

    public void Start()
    {
        PersistentData.SearchData.IndexPathRoot = StaticObjects.Parameters.TubSearchFolders;
        PersistentData.SearchData.Translation = StaticObjects.Book.GetTocSearchTranslation();
        PersistentData.SearchData.Clear();
        SetActive("1");
    }


    protected void ButtonClicked(string option)
    {
        AmadonEvents.NewSearchEntry(TOC_Entry.FromHref(option));
    }
    #endregion

    void OnSortClick()
    {
        PersistentData.SearchData.SortResults();
        TextInSearchButton = PersistentData.SearchData.OrderedByParagraphs ? "Order by Ranking" : "Order by Paragraph";
        PersistentData.SearchData.currentPage = "1";
        int currentPageAsInt = 1;
        int maxPaginas = PersistentData.SearchData.SearchResults.Count / PersistentData.SearchData.maxItemsPerPage + 1;
        currentPageAsInt = Convert.ToInt32(PersistentData.SearchData.currentPage);
        int totalPages = (int)Math.Ceiling((double)PersistentData.SearchData.SearchResults.Count / (double)PersistentData.SearchData.maxItemsPerPage);
        PersistentData.SearchData.paginationFirst = Math.Max(1, currentPageAsInt - 2);
        PersistentData.SearchData.paginationLast = Math.Min(totalPages, PersistentData.SearchData.paginationFirst + PersistentData.SearchData.maxPaginationItems - 1);
        PersistentData.SearchData.maxItemsPerPage = StaticObjects.Parameters.SearchPageSize;
        StateHasChanged();
    }

    void DoSearch()
    {
        if (!string.IsNullOrEmpty(PersistentData.SearchData.QueryString))
        {
            showSearchResults = true;
            Start();
            TextInSearchButton = PersistentData.SearchData.OrderedByParagraphs ? "Order by Ranking" : "Order by Paragraph";
            //StateHasChanged();
        }
    }

    void OnSearch()
    {
        DoSearch();
    }

    private void HandleOnQueryText()
    {
        DoSearch();
    }


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            PersistentData.SearchData.hasDataToShow = PersistentData.SearchData.SearchResults.Count > 0;
            CurrentTranslationTitle = StaticObjects.Book.GetTocSearchTranslation().Description;
            StateHasChanged();
            //dataEntry.OnQueryText += HandleOnQueryText;
        }
    }


}
