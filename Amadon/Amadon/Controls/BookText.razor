@using Amadon.Controls.Notes
@using Amadon.Services;
@using AmadonStandardLib.Classes;
@using Amadon.Controls;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.InterchangeData;
@using AmadonStandardLib.UbClasses;
@using System.Diagnostics;
@using Blazorise
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime;

<div id="rightColumn" class="black splitRight right mt-0 p-0 bg-dark text-white">
    <div class="row">
        @if (@PaperLines != null)
        {
            <Table ElementId="@tableId" Borderless Resizable ResizeMode="TableResizeMode.Columns" FullWidth Class="bg-dark text-white">
                <TableHeader>
                    @foreach (TitleData titleData in @PaperLines.Titles)
                    {
                        <TableHeaderCell Class="@TitleWidth(titleData)">
                            <Div Class="@TitleClass(titleData)">
                                <h2>@titleData.FirstLine</h2>
                                <p>@titleData.SecondLine</p>
                            </Div>
                        </TableHeaderCell>
                    }
                </TableHeader>

                <TableBody>
                    @foreach (ParagraphsLineData paragraphsLineData in @PaperLines.Lines)
                    {
                        <TableRow>
                            @if (paragraphsLineData.paragraphLeft != null)
                            {
                                string id = @GenerateParagraphId(paragraphsLineData.paragraphLeft, ParagraphPosition.Left);
                                <TableRowCell @oncontextmenu="(e)=> OnContextMenu(paragraphsLineData, e, id)">
                                    <Div id="@id"
                                         Class="@GenerateParagraphClass(paragraphsLineData.paragraphLeft)">
                                        @((MarkupString)GenerateParagraphText(paragraphsLineData, ParagraphPosition.Left, true))
                                    </Div>
                                </TableRowCell>
                            }
                            @if (paragraphsLineData.MiddleText != null)
                            {
                                string id = @GenerateParagraphId(paragraphsLineData.paragraphLeft, ParagraphPosition.Middle);
                                <TableRowCell @oncontextmenu="(e)=> OnContextMenu(paragraphsLineData, e, id)">
                                    <Div id="@id"
                                         Class="@GenerateParagraphClass(paragraphsLineData.paragraphLeft)">
                                        @((MarkupString)GenerateParagraphText(paragraphsLineData, ParagraphPosition.Middle, false))
                                    </Div>
                                </TableRowCell>
                            }
                            @if (paragraphsLineData.RightText != null)
                            {
                                string id = @GenerateParagraphId(paragraphsLineData.paragraphLeft, ParagraphPosition.Right);
                                <TableRowCell @oncontextmenu="(e)=> OnContextMenu(paragraphsLineData, e, id)">
                                    <Div id="@id"
                                         Class="@GenerateParagraphClass(paragraphsLineData.paragraphLeft)">
                                        @((MarkupString)GenerateParagraphText(paragraphsLineData, ParagraphPosition.Right, false))
                                    </Div>
                                </TableRowCell>
                            }
                        </TableRow>
                    }
                </TableBody>
            </Table>

        }

        <Dropdown @ref="contextMenu" Visible="@isContextMenuVisible">
            <DropdownMenu Style="@StyleForContextMenu()">
                @foreach (ContextMenuItem item in ContextMenuItems)
                {
                    <DropdownItem @onkeyup="HandleKeyUp" @onclick="() => ContextMenuClicked(item)">@item.Caption</DropdownItem>
                }
            </DropdownMenu>
        </Dropdown>

        <HelpModal @ref="ModalHelpControl"></HelpModal>

        <NotesModal @ref="NotesModalControl"></NotesModal>

    </div>

</div>



@code {
    private enum ParagraphPosition
    {
        Right,
        Middle,
        Left
    }

    private PaperText PaperLines { get; set; } = null;
    private HelpModal ModalHelpControl;
    private NotesModal NotesModalControl;
    private Table MainTextTable;
    private Dropdown contextMenu;

    private string ExpressionToHighlight { get; set; } = "";
    string anchor = "";
    const string tableId = "tableText";

    #region Context Menu
    private bool isContextMenuVisible;
    private (double LeftPx, double TopPx) contextMenuPosition;

    private async void JumpToAnchor()
    {
        if (StaticObjects.Parameters.Entry != null)
        {
            // Use IJSRuntime to inject the script
            await JSRuntime.InvokeVoidAsync("eval", "deferJumpToAnchor", StaticObjects.Parameters.Entry.Anchor);
        }
    }

    /*
    In a .NET MAUI Blazor app, `OnAfterRenderAsync` is typically used to perform actions after a component has rendered. However, it can sometimes be called before the page is fully displayed to the user, as you observed.

    If `OnAfterRenderAsync` is not meeting your needs, another approach is to use a combination of JavaScript and Blazor interop to ensure your JavaScript code runs at the right time. Specifically, you can leverage the JavaScript `requestAnimationFrame` function, which will run your code after the next repaint, ensuring that the changes are visually rendered before executing your code.

    Here's how you can achieve this:

    1. Define the JavaScript function with `requestAnimationFrame` to defer execution.
    2. Call this function from Blazor after rendering.

    ### JavaScript Code

        Place this script in your HTML or a separate JavaScript file:

        ```html
            <script>
            var anchorLink = '';

                function jumpToAnchor() {
            const cellElement = document.getElementById(anchorLink);
                if (cellElement) {
                try {
            cellElement.scrollIntoView();
    } catch (error) {
    console.error("An error occurred during routing: " + error.message);
    }
    }
    }

    function deferJumpToAnchor() {
    requestAnimationFrame(jumpToAnchor);
    }
    </script>
    ```

    ### Blazor Component

    Modify your Blazor component to call the deferred JavaScript function:

    ```razor
    @page "/your-page"
    @inject IJSRuntime JS

    <div>
    <!-- Your HTML content here -->
    <div id="your-anchor-id">This is the anchor element.</div>
    </div>

    @code {
    private string anchorLink = "your-anchor-id"; // Define the anchor ID

    protected override async Task OnAfterRenderAsync(bool firstRender)
            {
            if (firstRender)
            {
            // Set the global JavaScript variable
            await JS.InvokeVoidAsync("eval", $"anchorLink = '{anchorLink}';");

            // Defer the JavaScript function call to ensure it's after repaint
            await JS.InvokeVoidAsync("deferJumpToAnchor");
    }
    }
    }
    ```

    In this example:

    1. The `deferJumpToAnchor` function uses `requestAnimationFrame` to defer the `jumpToAnchor` call until after the next repaint, ensuring the page has been visually updated.
    2. The Blazor component sets the `anchorLink` variable and calls `deferJumpToAnchor` after the first render using `OnAfterRenderAsync`.

    This approach ensures that your JavaScript code runs only after the changes are fully rendered and shown to the user.
    */

    private class ContextMenuItem
    {
        public string Caption { get; set; } = "";
        public ContextMenuFunction Function { get; set; } = ContextMenuFunction.None;
        public ParagraphPosition Position { get; set; } = ParagraphPosition.Left;
        public string Id { get; set; } = "";
    }

    private enum ContextMenuFunction
    {
        None,
        AddToTrack,
        SelectAll,
        Copy,
        Highlight,
        Search,
        SearchSubjects
    }

    private List<ContextMenuItem> ContextMenuItems = new List<ContextMenuItem>
    {
        new ContextMenuItem { Caption = "Highlight", Function = ContextMenuFunction.Highlight },
        new ContextMenuItem { Caption = "Search", Function = ContextMenuFunction.Search },
        new ContextMenuItem { Caption = "Search Subjects", Function = ContextMenuFunction.SearchSubjects },
        new ContextMenuItem { Caption = "Copy", Function = ContextMenuFunction.Copy },
        new ContextMenuItem { Caption = "Add to Track", Function = ContextMenuFunction.AddToTrack },
        new ContextMenuItem { Caption = "Select Paragraph", Function = ContextMenuFunction.SelectAll },
    };

    [JSInvokable]
    public void HideContextMenu()
    {
        isContextMenuVisible = false;
        StateHasChanged();
    }

    private string StyleForContextMenu()
    {
        return $"position: fixed; left: {contextMenuPosition.LeftPx}px; top: {contextMenuPosition.TopPx}px;";
    }

    /// <summary>
    /// Open the context menu for the selected paragraph
    /// </summary>
    /// <param name="e"></param>
    /// <param name="id"></param>
    private async void OnContextMenu(ParagraphsLineData lineData, MouseEventArgs e, string id)
    {
        contextMenuPosition = (e.ClientX, e.ClientY);
        isContextMenuVisible = true;
        foreach (ContextMenuItem menu in ContextMenuItems)
        {
            menu.Id = id;  // the context menu always has the latest right click table cell id
        }

        // Hide the context menu after a click outside
        await JSRuntime.InvokeVoidAsync("registerClickOutsideHandler", DotNetObjectReference.Create(this));
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (e.CtrlKey)
            {
                // Handle Control + Enter
                Console.WriteLine("Control + Enter pressed");
            }
            else if (e.AltKey)
            {
                // Handle Alt + Enter
                Console.WriteLine("Alt + Enter pressed");
            }
            else
            {
                // Handle Enter
                Console.WriteLine("Enter pressed");
            }
        }
    }


    private async void ContextMenuClicked(ContextMenuItem item)
    {
        string text = "";
        switch (item.Function)
        {
            case ContextMenuFunction.SelectAll:
                await SelectDivText(item.Id);
                break;

            case ContextMenuFunction.AddToTrack:
                AddTotrack(item.Id);
                break;

            case ContextMenuFunction.Copy:
                text = await GetSelectedText(item.Id);
                if (!string.IsNullOrEmpty(text)) await Clipboard.SetTextAsync(text);
                break;

            case ContextMenuFunction.Search:
                text = await GetSelectedText(item.Id);
                text = text.Trim();
                AmadonEvents.SearchNewText(text);
                break;

            case ContextMenuFunction.SearchSubjects:
                text = await GetSelectedText(item.Id);
                text = text.Trim();
                AmadonEvents.SubjectSearchNewText(text);
                break;

            case ContextMenuFunction.Highlight:
                text = await GetSelectedText(item.Id);
                text = text.Trim();
                OnHighlightExpression(text);
                break;
        }
        isContextMenuVisible = false;
    }


    public async Task SelectDivText(string id)
    {
        await JSRuntime.InvokeVoidAsync("selectText", id);
    }

    private async void SetCurrentParagraph(TOC_Entry entry)
    {
        await JSRuntime.InvokeVoidAsync("changeDivClassInTable", tableId, "p-2");
        StaticObjects.Parameters.Entry = entry;
        await ChangeDivClass(entry.Anchor, true);
    }

    public void AddTotrack(string id)
    {
        TOC_Entry entry = TOC_Entry.FromHref(id);
        AmadonEvents.NewTocEntry(entry);
        StateHasChanged();
    }

    public async Task ChangeDivClass(string id, bool isSelectedParagraph)
    {
        string cssClass = isSelectedParagraph ? "p-2 highlightedPar" : "p-2";
        await JSRuntime.InvokeVoidAsync("changeClass", id, cssClass);
    }

    public async Task<string> GetSelectedText(string id)
    {
        return await JSRuntime.InvokeAsync<string>("getSelectedText", id);
    }


    #endregion

    #region Current page search and hightlight functions


    private void UnhighlightAll()
    {
        for (int i = 0; i < PaperLines.Titles.Count; i++)
        {
            PaperLines.Lines[i].paragraphLeft.Text = HighlightTexts.UnhighlightString(PaperLines.Lines[i].paragraphLeft.Text);
            if (PaperLines.Lines[i].MiddleText != null) PaperLines.Lines[i].MiddleText = HighlightTexts.UnhighlightString(PaperLines.Lines[i].MiddleText);
            if (PaperLines.Lines[i].RightText != null) PaperLines.Lines[i].RightText = HighlightTexts.UnhighlightString(PaperLines.Lines[i].RightText);
        }
        PersistentData.GenericData.HighlightedText = string.Empty;
        //StateHasChanged();
    }

    private void OnHighlightExpression(string expression)
    {
        expression = expression.Trim();
        UnhighlightAll();
        if (!string.IsNullOrEmpty(expression))
        {
            PersistentData.GenericData.HighlightedText = expression;
            for (int i = 0; i < PaperLines.Titles.Count; i++)
            {

                PaperLines.Lines[i].paragraphLeft.Text = HighlightTexts.HighlightString(PaperLines.Lines[i].paragraphLeft.Text, expression);
                if (PaperLines.Lines[i].MiddleText != null) PaperLines.Lines[i].MiddleText = HighlightTexts.HighlightString(PaperLines.Lines[i].MiddleText, expression);
                if (PaperLines.Lines[i].RightText != null) PaperLines.Lines[i].RightText = HighlightTexts.HighlightString(PaperLines.Lines[i].RightText, expression);
            }
        }
        //StateHasChanged();
    }

    #endregion

    #region Page title
    private string TitleWidth(TitleData titleData)
    {
        return $"{titleData.ColumnSize}";
    }

    private string TitleClass(TitleData titleData)
    {
        /*
        mt-4: Adds a margin-top of 1.5rem (24px).
        m-3: Adds a margin of 1rem (16px) on all sides.
        p-3: Adds padding of 1rem (16px) on all sides.
        */
        return "mt-4 m-3 p-3 bg-primary text-white rounded";
    }
    #endregion

    #region Paragraph text
    private string GenerateParagraphId(AmadonStandardLib.UbClasses.Paragraph par, ParagraphPosition position)
    {
        switch (position)
        {
            case ParagraphPosition.Left:
                return par.ID + "_L";
            case ParagraphPosition.Middle:
                return par.ID + "_M";
        }
        return par.ID + "_R";
    }

    private string GenerateParagraphClass(AmadonStandardLib.UbClasses.Paragraph par)
    {
        string cssClass = "p-2";
        if (par.TranslationId == StaticObjects.Book.GetTocSearchTranslation().LanguageID && par.Entry * StaticObjects.Parameters.Entry)
        {
            cssClass += " highlightedPar";
        }
        return cssClass;
    }

    private string FormatIdentification(string identification)
    {
        return $"<span class=\"text-secondary\">{identification} </span>";
    }


    private string GenerateParagraphText(ParagraphsLineData lineData, ParagraphPosition position, bool insertAnchor)
    {
        string ident = StaticObjects.Parameters.ShowParagraphIdentification
                             && (lineData.paragraphLeft.Format == ParagraphHtmlType.NormalParagraph || lineData.paragraphLeft.Format == ParagraphHtmlType.IdentedParagraph) ?
                             FormatIdentification(lineData.paragraphLeft.Identification) : "";
        string anchor = (insertAnchor ? $"<a name =\"{lineData.paragraphLeft.AName}\"/>" : "");
        string startTag = "", endTag = "", text = "";

        switch (position)
        {
            case ParagraphPosition.Left:
                text = lineData.paragraphLeft.GetHtml();
                break;
            case ParagraphPosition.Middle:
                text = lineData.MiddleText;
                break;
            case ParagraphPosition.Right:
                text = lineData.RightText;
                break;
        }
        switch (lineData.paragraphLeft.Format)
        {
            case ParagraphHtmlType.BookTitle:
                startTag = "<h1>"; endTag = "</h1>";
                break;
            case ParagraphHtmlType.PaperTitle:
                startTag = "<h2>"; endTag = "</h2>";
                break;
            case ParagraphHtmlType.SectionTitle:
                startTag = "<h3>"; endTag = "</h3>";
                break;
            case ParagraphHtmlType.NormalParagraph:
                startTag = "<p>"; endTag = "</p>";
                break;
            case ParagraphHtmlType.IdentedParagraph:
                startTag = "<bloquote><p>"; endTag = "</p></bloquote>";
                break;
        }
        return $"{startTag}{anchor} {ident} {text}{endTag}";
    }
    #endregion

    #region Page Control
    [JSInvokable]
    public static void HandleF1KeyPress()
    {
        // Handle the F1 key press here
        AmadonEvents.HelpContext();
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //await JSRuntime.InvokeVoidAsync("setupF1KeyListener");
        LibraryEventsControl.RedrawText += EventsControl_RedrawText;
        AmadonEvents.OnNewTocEntry += OnNewTocEntry;
        AmadonEvents.OnNewSubjectIndexEntry += OnNewTocEntry;
        AmadonEvents.OnNewSearchEntry += OnNewTocEntry;
        AmadonEvents.OnNewTrackEntry += OnNewTocEntry;
        AmadonEvents.OnTranslationsToShowChanged += TranslationsToShowChanged;
        AmadonEvents.OnHighlightExpression += OnHighlightExpression;
        AmadonEvents.OnShowHelpPage += ShowHelp;
        AmadonEvents.OnNewParagraphIdent += OnNewParagraphIdent;
        AmadonEvents.OnOpenEditNoteText += OnOpenEditNoteText;
    }


    private async void GetTexts()
    {
        PaperLines = await TextServiceContextMenu.GetHtml();
        await Task.Delay(1000);
    }

    private async Task ShowPage()
    {
        GetTexts();
        OnHighlightExpression(PersistentData.GenericData.HighlightedText);
        AmadonEvents.UpdateParagraphIdent(StaticObjects.Parameters.Entry);
        // Ensure StateHasChanged is called on the UI thread
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }


    protected void ShowHelp(string helpPage)
    {
        ModalHelpControl.ShowModal(helpPage);
        StateHasChanged();
    }


    protected async void EventsControl_RedrawText()
    {
        await ShowPage();
    }

    private async void TranslationsToShowChanged()
    {
        await ShowPage();
    }

    public async void OnNewTocEntry(TOC_Entry entry)
    {
        StaticObjects.Parameters.Entry = entry;
        await ShowPage();
    }


    public async void OnNewParagraphIdent(TOC_Entry entry)
    {
        await ShowPage();
    }

    private void OnOpenEditNoteText(UserNote note, bool readOnly)
    {
        NotesModalControl.ShowEditNotes(note, readOnly);
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ShowPage();
            AmadonEvents.UpdateParagraphIdent(StaticObjects.Parameters.Entry);
        }
        SetCurrentParagraph(StaticObjects.Parameters.Entry);
        JumpToAnchor();
    }
    #endregion
}
