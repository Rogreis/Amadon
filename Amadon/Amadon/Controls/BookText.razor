@using Amadon.Controls.Notes
@using Amadon.Services;
@using AmadonStandardLib.Classes;
@using Amadon.Controls;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.InterchangeData;
@using AmadonStandardLib.UbClasses;
@using System.Diagnostics;
@using Blazorise
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime;

<div id="rightColumn" class="black splitRight right mt-0 p-0 bg-dark text-white">
    <div class="row">
        @if (@PaperLines != null)
        {
            <Table ElementId="@tableId" Borderless Resizable ResizeMode="TableResizeMode.Columns" FullWidth Class="bg-dark text-white">
               <TableHeader>
               @foreach (TitleData titleData in @PaperLines.Titles)
               {
                  <TableHeaderCell Class="@TitleWidth(titleData)">
                      <Div Class="@TitleClass(titleData)">
                        <h2>@titleData.FirstLine</h2>
                        <p>@titleData.SecondLine</p>
                     </Div>
                  </TableHeaderCell>
               }
               </TableHeader>

               <TableBody>
                  @foreach (string line in @PaperLines.Lines)
                  {
                     <TableRow>
                           @((MarkupString)@line)
                     </TableRow>
                  }
               </TableBody>
            </Table>
        }

        <HelpModal @ref="ModalHelpControl"></HelpModal>

        <NotesModal @ref="NotesModalControl"></NotesModal>

    </div>

</div>


@code {
    private PaperText PaperLines { get; set; }
    private string ExpressionToHighlight { get; set; }
    private HelpModal ModalHelpControl;
    private NotesModal NotesModalControl;
    string anchor = "";

    public class Item
    {
        public string Property1 { get; set; }
        public string Property2 { get; set; }
    }


    private bool isContextMenuVisible;
    private (double LeftPx, double TopPx) contextMenuPosition;
    private List<Item> Items = new List<Item>
    {
        new Item { Property1 = "Row 1, Column 1", Property2 = "Row 1, Column 2" },
        new Item { Property1 = "Row 2, Column 1", Property2 = "Row 2, Column 2" }
    };


    Table MainTextTable;
    const string tableId = "tableText";

    private async void ShowContextMenu(MouseEventArgs e, Item item)
    {
        contextMenuPosition = (e.ClientX, e.ClientY);
        isContextMenuVisible = true;

        // Hide the context menu after a click outside
        await JSRuntime.InvokeVoidAsync("registerClickOutsideHandler", DotNetObjectReference.Create(this));
    }


    [JSInvokable]
    public static void HandleF1KeyPress()
    {
        // Handle the F1 key press here
        AmadonEvents.HelpContext();
    }


    #region Current page search and hightlight functions


    private void UnhighlightAll()
    {
        for (int i = 0; i < PaperLines.Titles.Count; i++)
        {
            PaperLines.Lines[i] = HighlightTexts.UnhighlightString(PaperLines.Lines[i]);
        }
        for (int i = 0; i < PaperLines.Lines.Count; i++)
        {
            PaperLines.Lines[i] = HighlightTexts.UnhighlightString(PaperLines.Lines[i]);
        }
        PersistentData.GenericData.HighlightedText = string.Empty;
        StateHasChanged();
    }

    private void OnHighlightExpression(string expression)
    {
        if (!string.IsNullOrEmpty(expression))
        {
            PersistentData.GenericData.HighlightedText = expression;
            for (int i = 0; i < PaperLines.Titles.Count; i++)
            {
                PaperLines.Lines[i] = HighlightTexts.UnhighlightString(PaperLines.Lines[i]);
                PaperLines.Lines[i] = HighlightTexts.HighlightString(PaperLines.Lines[i], expression);
            }
            for (int i = 0; i < PaperLines.Lines.Count; i++)
            {
                PaperLines.Lines[i] = HighlightTexts.UnhighlightString(PaperLines.Lines[i]);
                PaperLines.Lines[i] = HighlightTexts.HighlightString(PaperLines.Lines[i], expression);
            }
            StateHasChanged();
        }
        else
        {
            UnhighlightAll();
        }
    }

    #endregion

    private string TitleWidth(TitleData titleData)
    {
        return $"{titleData.ColumnSize}";
    }

    private string TitleClass(TitleData titleData)
    {
       /*
        mt-4: Adds a margin-top of 1.5rem (24px).
        m-3: Adds a margin of 1rem (16px) on all sides.
        p-3: Adds padding of 1rem (16px) on all sides.
       */
        return "mt-4 m-3 p-3 bg-primary text-white rounded";
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await JSRuntime.InvokeVoidAsync("setupF1KeyListener");
        LibraryEventsControl.RedrawText += EventsControl_RedrawText;
        AmadonEvents.OnNewTocEntry += OnNewTocEntry;
        AmadonEvents.OnNewSubjectIndexEntry += OnNewTocEntry;
        AmadonEvents.OnNewSearchEntry += OnNewTocEntry;
        AmadonEvents.OnNewTrackEntry += OnNewTocEntry;
        AmadonEvents.OnTranslationsToShowChanged += TranslationsToShowChanged;
        AmadonEvents.OnHighlightExpression += OnHighlightExpression;
        AmadonEvents.OnShowHelpPage += ShowHelp;
        AmadonEvents.OnNewParagraphIdent += OnNewParagraphIdent;
        AmadonEvents.OnOpenEditNoteText += OnOpenEditNoteText;
    }


    private async void GetTexts()
    {
        PaperLines = await TextServiceContextMenu.GetHtml();
        await Task.Delay(1);
    }

    private async void JumpToAnchor(TOC_Entry entry)
    {
        await Task.Delay(1);
        await JSRuntime.InvokeVoidAsync("jumpToAnchor", $"{entry.Anchor}");
    }


    private void ShowPage()
    {
        GetTexts();
        OnHighlightExpression(PersistentData.GenericData.HighlightedText);
        AmadonEvents.UpdateParagraphIdent(StaticObjects.Parameters.Entry);
        StateHasChanged();
        JumpToAnchor(StaticObjects.Parameters.Entry);
    }


    protected void ShowHelp(string helpPage)
    {
        ModalHelpControl.ShowModal(helpPage);
        StateHasChanged();
    }


    protected void EventsControl_RedrawText()
    {
        ShowPage();
    }

    private void TranslationsToShowChanged()
    {
        ShowPage();
    }

    public void OnNewTocEntry(TOC_Entry entry)
    {
        StaticObjects.Parameters.Entry = entry;
        ShowPage();
    }


    public void OnNewParagraphIdent(TOC_Entry entry)
    {
        StaticObjects.Parameters.Entry = entry;
        ShowPage();
    }

    private void OnOpenEditNoteText(UserNote note, bool readOnly)
    {
        NotesModalControl.ShowEditNotes(note, readOnly);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
             await Task.Run(() =>
            {
                GetTexts();
            });
            AmadonEvents.UpdateParagraphIdent(StaticObjects.Parameters.Entry);
            StateHasChanged();
        }
     }
}
